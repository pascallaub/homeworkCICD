name: Deploy React App to EC2

on:
  push:
    branches: [main]

jobs:
  ci_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: npm run build

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/

  infra_provision:
    runs-on: ubuntu-latest
    needs: ci_build
    outputs:
      ec2_ip: ${{ steps.extract_output.outputs.ec2_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init, Plan, Apply
        run: |
          terraform -chdir=terraform init
          terraform -chdir=terraform plan
          terraform -chdir=terraform apply -auto-approve
        env:
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_tf_state_bucket: ${{ secrets.TF_STATE_BUCKET }}

      - name: Extract EC2 IP
        id: extract_output
        run: |
          IP=$(terraform -chdir=terraform output -raw ec2_ip)
          echo "EC2_IP=$IP"
          echo "ec2_ip=$IP" >> $GITHUB_OUTPUT

  app_deploy:
    runs-on: ubuntu-latest
    needs: infra_provision
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to EC2 via SCP and restart Nginx
        run: |
          EC2_IP="${{ needs.infra_provision.outputs.ec2_ip }}"
          echo "Deploying to EC2 at IP: $EC2_IP"
          if [ -z "$EC2_IP" ]; then
            echo "‚ùå EC2_IP is empty. Aborting deployment."
            exit 1
          fi

          ssh -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'mkdir -p /home/ubuntu/deploy'
          scp -o StrictHostKeyChecking=no -r dist/* ubuntu@$EC2_IP:/home/ubuntu/deploy/
          ssh -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'sudo cp -r /home/ubuntu/deploy/* /var/www/html && sudo systemctl restart nginx'

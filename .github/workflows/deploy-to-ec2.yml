name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  ci_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install dependencies
        run: npm install
        
      - name: Build app
        run: npm run build
        
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/

  infra_provision:
    runs-on: ubuntu-latest
    needs: ci_build
    env:
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_tf_state_bucket: ${{ secrets.TF_STATE_BUCKET }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Plan
        run: terraform plan
        
      - name: Terraform Apply
        run: terraform apply -auto-approve
        
      - name: Get EC2 IP
        id: ec2_ip
        run: echo "ip=$(terraform output -raw ec2_ip)" >> $GITHUB_OUTPUT
        
    outputs:
      ec2_ip: ${{ steps.ec2_ip.outputs.ip }}

  app_deploy:
    runs-on: ubuntu-latest
    needs: [ci_build, infra_provision]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
          
      - name: Get SSH key from Terraform output
        working-directory: terraform
        run: |
          mkdir -p ~/.ssh
          terraform output -raw private_key_pem > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.infra_provision.outputs.ec2_ip }} >> ~/.ssh/known_hosts
          
      - name: Deploy to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r dist/* ec2-user@${{ needs.infra_provision.outputs.ec2_ip }}:/tmp/
          ssh -o StrictHostKeyChecking=no ec2-user@${{ needs.infra_provision.outputs.ec2_ip }} '
            sudo yum install -y nginx || true
            sudo systemctl start nginx || true
            sudo systemctl enable nginx || true
            sudo mkdir -p /var/www/html
            sudo rm -rf /var/www/html/*
            sudo cp -r /tmp/* /var/www/html/ 2>/dev/null || true
            sudo chown -R nginx:nginx /var/www/html
            sudo chmod -R 755 /var/www/html
            sudo systemctl restart nginx || sudo service nginx restart
          '
